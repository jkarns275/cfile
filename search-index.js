var searchIndex = {};
searchIndex["cfile_rs"] = {"doc":"","items":[[8,"Seek","cfile_rs","The `Seek` trait provides a cursor which can be moved within a stream of bytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",0,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",1,null],[13,"End","","Set the offset to the size of this object plus the specified number of bytes.",1,null],[13,"Current","","Set the offset to the current position plus the specified number of bytes.",1,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",2,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",2,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",2,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",3,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",3,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",3,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",4,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",4,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",4,null],[13,"ConnectionReset","","The connection was reset by the remote server.",4,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",4,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",4,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",4,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",4,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",4,null],[13,"AlreadyExists","","An entity already exists, often a file.",4,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",4,null],[13,"InvalidInput","","A parameter was incorrect.",4,null],[13,"InvalidData","","Data not valid for the operation were encountered.",4,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",4,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write()`] returned [`Ok(0)`].",4,null],[13,"Interrupted","","This operation was interrupted.",4,null],[13,"Other","","Any I/O error not part of this list.",4,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",4,null],[3,"CFile","","A wrapper around C's file type. Attempts to mimic the functionality if rust's std::fs::File while still allowing complete control of all I/O operations.",null,null],[12,"path","","",5,null],[5,"chmod","","A utility function to change read/write/execute permissions of a file.",null,{"inputs":[{"name":"p"},{"name":"u32"}],"output":{"name":"result"}}],[5,"buffer","","A utility function that creates a \"buffer\" of len bytes. A Vec is used because it is memory safe and has a bunch of useful functionality (duh).",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[7,"RANDOM_ACCESS_MODE","","A &'static str to be passed into the CFile::open method. It will open the file in a way that will allow reading and writing, including overwriting old data. It will not create the file if it does not exist.",null,null],[7,"UPDATE","","A &'static str to be passed into the CFile::open method. It will open the file in a way that will allow reading and writing, including overwriting old data",null,null],[7,"READ_ONLY","","A &'static str to be passed into the CFile::open method. It will only allow reading.",null,null],[7,"WRITE_ONLY","","A &'static str to be passed into the CFile::open method. It will only allow writing.",null,null],[7,"APPEND_ONLY","","A &'static str to be passed into the CFile::open method. It will only allow data to be appended to the end of the file.",null,null],[7,"APPEND_READ","","A &'static str to be passed into the CFile::open method. It will allow data to be appended to the end of the file, and data to be read from the file. It will create the file if it doesn't exist.",null,null],[7,"TRUNCATAE_RANDOM_ACCESS_MODE","","A &'static str to be passed into the CFile::open method. It will open the file in a way that will allow reading and writing, including overwriting old data. It will create the file if it doesn't exist",null,null],[11,"open_random_access","","Attempts to open a file in random access mode (i.e. rb+). However, unlike rb+, if the file doesn't exist, it will be created. To avoid createion, simply call CFile::open(path, \"rb+\"), which will return an error if the file doesn't exist. # Failure This function will return Err for a whole bunch of reasons, the errno id will be returned as an Error::Errno(u64). For more information on what that number actually means see",5,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create_file","","Attempts to create a file, and then immedietly close it. If the file already exists, this function will not do anything. If the file does exist, then it will be created with no and nothing more (it will be empty).",5,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"open","","Attempt to open the file with path p. # Examples ``` use cfile_rs; use cfile_rs::*; use cfile_rs::CFile; use cfile_rs::TRUNCATAE_RANDOM_ACCESS_MODE; use std::str::from_utf8;",5,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"delete","","Deletes the file from the filesystem, and consumes the object. # Errors On error Error::Errno(errno) is returned. # Examples ``` use cfile_rs; use cfile_rs::*; use cfile_rs::CFile; use cfile_rs::UPDATE; use std::str::from_utf8;",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Attempts to close the file. Consumes the file as well # Errors On error Error::Errno(errno) is returned.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"file","","Returns the underlying file pointer as a reference. It is returned as a reference to, in theory, prevent it from being used after the file is closed.",5,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"current_pos","","Returns the current position in the file. # Errors On error Error::Errno(errno) is returned.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write all of the bytes in buf to the file. # Errors If an error occurs during writing, Error::WriteError(bytes_written, errno) will be returned. # Examples ``` use cfile_rs; use cfile_rs::*; use cfile_rs::CFile; use cfile_rs::TRUNCATAE_RANDOM_ACCESS_MODE; use std::str::from_utf8;",5,null],[11,"write","","Attempts to write all of the bytes in buf to the file. # Errors If an error occurs during writing, Error::WriteError(bytes_written, errno) will be returned. # Examples ``` use cfile_rs; use cfile_rs::*; use cfile_rs::CFile; use cfile_rs::TRUNCATAE_RANDOM_ACCESS_MODE; use std::str::from_utf8;",5,null],[11,"flush","","Flushes the underlying output stream, meaning it actually writes everything to the filesystem. # Examples ``` use cfile_rs; use cfile_rs::SeekFrom; use cfile_rs::CFile; use cfile_rs::TRUNCATAE_RANDOM_ACCESS_MODE; use cfile_rs::*;",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_to_end","","Reads the entire file starting from the current position, expanding buf as needed. On a successful read, this function will return Ok(bytes_read). # Errors If an error occurs during reading, some varient of error will be returned. # Examples ``` use cfile_rs; use cfile_rs::CFile; use cfile_rs::TRUNCATAE_RANDOM_ACCESS_MODE; use std::str::from_utf8; use std::io::{ Seek, SeekFrom, Read, Write };",5,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read","","Reads exactly the number of bytes required to fill buf. # Errors If the end of the file is reached before buf is filled, Err(EndOfFile(bytes_read)) will be returned. The data that was read before that will still have been placed into buf.",5,null],[11,"read_exact","","Reads exactly the number of bytes required to fill buf. # Errors If the end of the file is reached before buf is filled, Err(EndOfFile(bytes_read)) will be returned. The data that was read before that will still have been placed into buf.",5,null],[11,"seek","","Changes the current position in the file using the SeekFrom enum.",5,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","Ensures the file stream is closed before abandoning the data.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",4,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"option"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"seekfrom"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",6,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",6,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",6,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",6,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}]],"paths":[[8,"Seek"],[4,"SeekFrom"],[8,"Read"],[8,"Write"],[4,"ErrorKind"],[3,"CFile"],[3,"Error"]]};
initSearch(searchIndex);
